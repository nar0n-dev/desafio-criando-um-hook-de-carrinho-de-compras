{"ast":null,"code":"var _jsxFileName = \"/home/nar0n/WWW/Ignite/Desafios/Desafios Principais/desafio-criando-hook-carrinho-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const productsList = await api.get('/products').then(response => response.data);\n      const productsFilter = productsList.filter(product => product.id === productId);\n      console.log(productsFilter);\n    } catch {}\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"YtbuN1V+lyXswE7SGXU88jdf5dY=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/nar0n/WWW/Ignite/Desafios/Desafios Principais/desafio-criando-hook-carrinho-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","addProduct","productId","productsList","get","then","response","data","productsFilter","filter","product","id","console","log","removeProduct","updateProductAmount","amount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAkBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD;AAEA;AACA;AACA;AAEA,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMO,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACF,YAAMC,YAAY,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAQ,WAAR,EAAqBC,IAArB,CAA0BC,QAAQ,IAAIA,QAAQ,CAACC,IAA/C,CAA3B;AACA,YAAMC,cAAc,GAAGL,YAAY,CAACM,MAAb,CAAqBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeT,SAAhD,CAAvB;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AAED,KALD,CAKE,MAAM,CAEP;AACF,GATD;;AAWA,QAAMM,aAAa,GAAIZ,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMa,mBAAmB,GAAG,OAAO;AACjCb,IAAAA,SADiC;AAEjCc,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBa,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGjB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhDeD,Y;;KAAAA,Y;AAkDhB,OAAO,SAASoB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGzB,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAOsB,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const productsList = await api.get('/products').then(response => response.data)\n      const productsFilter = productsList.filter((product) => product.id === productId)\n      console.log(productsFilter)\n\n    } catch {\n      \n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}